Index: soundapp.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\nimport os.path\r\nfrom tkinter import *\r\nfrom tkinter import ttk, filedialog, messagebox\r\nimport tkinter as tk\r\nfrom pathlib import Path\r\nfrom pydub import AudioSegment\r\nimport wave\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.figure as Figure\r\nfrom matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk)\r\nimport numpy as np\r\n\r\n# returns raw audio data from wav file\r\ndef getwavdata(audio_file):\r\n    wav_file = wave.open(audio_file, 'rb')\r\n    audio_data = wav_file.readframes(wav_file.getnframes())\r\n    return np.frombuffer(audio_data, np.int16)\r\n\r\n\r\ndef getfilepath():\r\n    _filepath.set(tk.filedialog.askopenfilename())\r\n\r\n\r\ndef loadfilepath():\r\n    try:\r\n        if str(_choose_file_textbox.get()) != '':\r\n            _filepath.set(_choose_file_textbox.get())\r\n            sb(f'File path set as \\\"{_filepath.get()}\\\"')\r\n        else:\r\n            sb('File path cannot be empty.')\r\n    except:\r\n        sb('Error setting specified path.')\r\n\r\n\r\n# checks if file is in wav format\r\n\r\ndef sb(msg):\r\n    _status_msg.set(msg)\r\n\r\n\r\n# Not finished, not sure if this function works or not\r\n'''def converttowav(input_file):\r\n    # Check if the file exists\r\n    if not os.path.isfile(input_file):\r\n        print(f\"Error: File {input_file} not found.\")\r\n        return\r\n\r\n    # Check if the file has a supported audio extension\r\n    supported_extensions = ['.mp3', '.wav', '.ogg']  # audio extensions\r\n    file_extension = os.path.splitext(input_file)[1].lower()\r\n\r\n    if file_extension not in supported_extensions:\r\n        print(f\"Error: Unsupported file format ({file_extension}). Supported formats are {supported_extensions}.\")\r\n        return\r\n\r\n    try:\r\n        # Attempt to load and convert the audio file\r\n        audiofile = AudioSegment.from_file(input_file, format='wav')\r\n        print(f\"Conversion successful. WAV file saved as {audiofile}\")\r\n        return audiofile\r\n    except Exception as e:\r\n        print(f\"Error during conversion: {e}\")\r\n'''\r\n\r\n\r\n# This works! It extracts raw audio data from any audio file type, then returns it as wav\r\ndef converttowav(audio_file_path):\r\n    audio_file = AudioSegment.from_file(\r\n        audio_file_path,\r\n        format=os.path.splitext(audio_file_path)[-1].strip('.')\r\n    )\r\n\r\n    wav_data = audio_file.raw_data\r\n    wav_audio = AudioSegment(\r\n        wav_data,\r\n        frame_rate=audio_file.frame_rate,\r\n        sample_width=audio_file.sample_width,\r\n        channels=audio_file.channels\r\n    )\r\n    # sets channels to 1 in case of multiple channels\r\n    wav_audio.set_channels(1)\r\n\r\n    return wav_audio\r\n\r\n\r\ndef extractdata():\r\n    wav_audio = converttowav(_filepath.get())\r\n\r\n    raw_data = np.frombuffer(wav_audio.raw_data, dtype=np.int16)\r\n\r\n    time_duration = len(raw_data) / wav_audio.frame_rate\r\n    wav_audio_time_length = np.linspace(0, time_duration, len(raw_data))\r\n\r\n    time_min = time_duration // 60\r\n    time_sec = round(time_duration % (24 * 3600), 2)\r\n\r\n    time_string = f'{time_min} minutes {time_sec} seconds'\r\n    print(time_string)\r\n    print(getmetadata(_filepath.get()))\r\n\r\n\r\ndef createplot():\r\n\r\n    # data = getwavdata(_filepath.get())\r\n\r\n    data = np.frombuffer(converttowav(_filepath.get()).raw_data, dtype=np.int16)\r\n\r\n    fig, ax = plt.subplots(figsize=(5, 2))\r\n    ax.plot(data)\r\n    ax.set_title('Waveform of ' + _filepath.get().split('/')[-1])\r\n\r\n    canvas = FigureCanvasTkAgg(fig, master=_data_file_frame)\r\n    canvas.draw()\r\n    canvas.get_tk_widget().grid(column=0, row=3)\r\n\r\n\r\ndef getmetadata(file_path):\r\n\r\n    metadata = {\r\n        'Title': file_path.split('/')[-1],\r\n        'Latest Modification Time': datetime.datetime.fromtimestamp(os.path.getmtime(file_path)),\r\n        'File Creation Date': datetime.datetime.fromtimestamp(os.path.getctime(file_path)).date(),\r\n        'File Size': os.path.getsize(file_path)\r\n    }\r\n\r\n    return metadata\r\n\r\nif __name__ == \"__main__\":  # execute logic if run directly\r\n    _root = Tk()  # instantiate instance of Tk class\r\n    _root.title('Sound App')\r\n    _root.geometry('800x500')\r\n    _root.rowconfigure(0, weight=1)\r\n    _root.columnconfigure(0, weight=1)\r\n    # _root.resizable(False, False)\r\n    _mainframe = ttk.Frame(_root, padding='5 5 5 5 ')  # root is parent of frame\r\n    _mainframe.grid(row=0, column=0, sticky=(\"E\", \"W\", \"N\", \"S\"))\r\n    _mainframe.rowconfigure(0, weight=1)\r\n    _mainframe.columnconfigure(0, weight=1)\r\n    # placed on first row,col of parent\r\n    # frame can extend itself in all cardinal directions\r\n\r\n    _load_file_frame = ttk.LabelFrame(\r\n        _mainframe,\r\n        padding='5 5 5 5',\r\n        text='Choose File'\r\n    )\r\n    _load_file_frame.grid(\r\n        column=0,\r\n        row=0,\r\n        sticky='new'\r\n    )\r\n    _load_file_frame.rowconfigure(0, weight=1)\r\n    _load_file_frame.columnconfigure(0, weight=1)\r\n\r\n    _filepath = StringVar()\r\n\r\n    _choose_file_label = ttk.Label(\r\n        _load_file_frame,\r\n        text='Please input the path of the file you wish to analyze:',\r\n    )\r\n    _choose_file_label.grid(\r\n        column=0,\r\n        row=0,\r\n        columnspan=1,\r\n        sticky='W'\r\n    )\r\n\r\n    _choose_file_textbox = ttk.Entry(\r\n        _load_file_frame,\r\n        width=70,\r\n        textvariable=_filepath\r\n    )\r\n    _choose_file_textbox.grid(\r\n        column=0,\r\n        row=1,\r\n        sticky='ew'\r\n    )\r\n\r\n    _choose_file_button = ttk.Button(\r\n        _load_file_frame,\r\n        text='Browse',\r\n        command=getfilepath\r\n    )\r\n    _choose_file_button.grid(\r\n        column=0,\r\n        row=2,\r\n        sticky='W'\r\n    )\r\n    _load_file_button = ttk.Button(\r\n        _load_file_frame,\r\n        text='Load',\r\n        command=loadfilepath\r\n    )\r\n    _load_file_button.grid(\r\n        column=2,\r\n        row=1,\r\n        sticky='E',\r\n    )\r\n\r\n    _data_file_frame = ttk.LabelFrame(\r\n        _mainframe,\r\n        padding='5 5 5 5',\r\n        text='Data'\r\n    )\r\n    _data_file_frame.grid(\r\n        column=0,\r\n        row=1,\r\n        sticky='new'\r\n    )\r\n    _data_file_frame.rowconfigure(1, weight=1)\r\n    _data_file_frame.columnconfigure(0, weight=1)\r\n\r\n    _plot_show = ttk.Button(\r\n        _data_file_frame,\r\n        text='Plot',\r\n        command=createplot\r\n    )\r\n    _plot_show.grid(\r\n        column=0,\r\n        row=1,\r\n        sticky='wn'\r\n    )\r\n    _data_show = ttk.Button(\r\n        _data_file_frame,\r\n        text='Data',\r\n        command=extractdata\r\n    )\r\n    _data_show.grid(\r\n        column=0,\r\n        row=2,\r\n        sticky='nw'\r\n    )\r\n\r\n    _status_frame = ttk.Frame(\r\n        _root, relief='sunken', padding='2 2 2 2')\r\n    _status_frame.grid(row=1, column=0, sticky=(\"E\", \"W\", \"S\"))\r\n    _status_msg = StringVar()  # need modified when update status text\r\n    _status_msg.set('')\r\n    _status = ttk.Label(\r\n        _status_frame, textvariable=_status_msg, anchor=W)\r\n    _status.grid(row=0, column=0, sticky=(E, W))\r\n\r\n    # _root.bind(\"<Configure>\", on_resize)\r\n    _root.mainloop()  # listens for events, blocks any code that comes after it\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/soundapp.py b/soundapp.py
--- a/soundapp.py	(revision de8a6b460ff0f91a3157c51bcf552172899258bc)
+++ b/soundapp.py	(date 1701460613661)
@@ -1,4 +1,3 @@
-import datetime
 import os.path
 from tkinter import *
 from tkinter import ttk, filedialog, messagebox
@@ -8,20 +7,24 @@
 import wave
 import matplotlib.pyplot as plt
 import matplotlib.figure as Figure
-from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk)
+from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,  NavigationToolbar2Tk)
 import numpy as np
 
-# returns raw audio data from wav file
+
+#returns raw audio data from wav file
 def getwavdata(audio_file):
     wav_file = wave.open(audio_file, 'rb')
     audio_data = wav_file.readframes(wav_file.getnframes())
     return np.frombuffer(audio_data, np.int16)
 
+def getFrequency():
 
 def getfilepath():
     _filepath.set(tk.filedialog.askopenfilename())
 
 
+
+
 def loadfilepath():
     try:
         if str(_choose_file_textbox.get()) != '':
@@ -38,7 +41,6 @@
 def sb(msg):
     _status_msg.set(msg)
 
-
 # Not finished, not sure if this function works or not
 '''def converttowav(input_file):
     # Check if the file exists
@@ -63,7 +65,6 @@
         print(f"Error during conversion: {e}")
 '''
 
-
 # This works! It extracts raw audio data from any audio file type, then returns it as wav
 def converttowav(audio_file_path):
     audio_file = AudioSegment.from_file(
@@ -78,31 +79,11 @@
         sample_width=audio_file.sample_width,
         channels=audio_file.channels
     )
-    # sets channels to 1 in case of multiple channels
-    wav_audio.set_channels(1)
 
     return wav_audio
 
-
-def extractdata():
-    wav_audio = converttowav(_filepath.get())
-
-    raw_data = np.frombuffer(wav_audio.raw_data, dtype=np.int16)
-
-    time_duration = len(raw_data) / wav_audio.frame_rate
-    wav_audio_time_length = np.linspace(0, time_duration, len(raw_data))
-
-    time_min = time_duration // 60
-    time_sec = round(time_duration % (24 * 3600), 2)
-
-    time_string = f'{time_min} minutes {time_sec} seconds'
-    print(time_string)
-    print(getmetadata(_filepath.get()))
-
-
 def createplot():
-
-    # data = getwavdata(_filepath.get())
+    #data = getwavdata(_filepath.get())
 
     data = np.frombuffer(converttowav(_filepath.get()).raw_data, dtype=np.int16)
 
@@ -112,27 +93,15 @@
 
     canvas = FigureCanvasTkAgg(fig, master=_data_file_frame)
     canvas.draw()
-    canvas.get_tk_widget().grid(column=0, row=3)
-
-
-def getmetadata(file_path):
-
-    metadata = {
-        'Title': file_path.split('/')[-1],
-        'Latest Modification Time': datetime.datetime.fromtimestamp(os.path.getmtime(file_path)),
-        'File Creation Date': datetime.datetime.fromtimestamp(os.path.getctime(file_path)).date(),
-        'File Size': os.path.getsize(file_path)
-    }
-
-    return metadata
+    canvas.get_tk_widget().grid(column=0, row=0)
 
 if __name__ == "__main__":  # execute logic if run directly
     _root = Tk()  # instantiate instance of Tk class
     _root.title('Sound App')
-    _root.geometry('800x500')
+    _root.geometry('600x500')
     _root.rowconfigure(0, weight=1)
     _root.columnconfigure(0, weight=1)
-    # _root.resizable(False, False)
+    #_root.resizable(False, False)
     _mainframe = ttk.Frame(_root, padding='5 5 5 5 ')  # root is parent of frame
     _mainframe.grid(row=0, column=0, sticky=("E", "W", "N", "S"))
     _mainframe.rowconfigure(0, weight=1)
@@ -140,6 +109,8 @@
     # placed on first row,col of parent
     # frame can extend itself in all cardinal directions
 
+
+
     _load_file_frame = ttk.LabelFrame(
         _mainframe,
         padding='5 5 5 5',
@@ -157,7 +128,7 @@
 
     _choose_file_label = ttk.Label(
         _load_file_frame,
-        text='Please input the path of the file you wish to analyze:',
+        text='Please input the path file you would like to analyze: ',
     )
     _choose_file_label.grid(
         column=0,
@@ -218,28 +189,24 @@
     )
     _plot_show.grid(
         column=0,
-        row=1,
-        sticky='wn'
-    )
-    _data_show = ttk.Button(
-        _data_file_frame,
-        text='Data',
-        command=extractdata
-    )
-    _data_show.grid(
-        column=0,
-        row=2,
-        sticky='nw'
+        row=1
     )
 
     _status_frame = ttk.Frame(
         _root, relief='sunken', padding='2 2 2 2')
     _status_frame.grid(row=1, column=0, sticky=("E", "W", "S"))
-    _status_msg = StringVar()  # need modified when update status text
+    _status_msg = StringVar() # need modified when update status text
     _status_msg.set('')
-    _status = ttk.Label(
+    _status= ttk.Label(
         _status_frame, textvariable=_status_msg, anchor=W)
     _status.grid(row=0, column=0, sticky=(E, W))
 
-    # _root.bind("<Configure>", on_resize)
+
+
+
+
+    #_root.bind("<Configure>", on_resize)
     _root.mainloop()  # listens for events, blocks any code that comes after it
+
+
+
