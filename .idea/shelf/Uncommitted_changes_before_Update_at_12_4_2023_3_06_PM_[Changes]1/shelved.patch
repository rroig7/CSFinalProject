Index: soundapp.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport datetime\r\nimport os.path\r\nfrom tkinter import *\r\nfrom tkinter import ttk, filedialog, messagebox\r\nimport tkinter as tk\r\nfrom pathlib import Path\r\n\r\n\r\nimport pydub\r\nfrom pydub import AudioSegment\r\nimport wave\r\nimport matplotlib.pyplot as plt\r\nfrom pydub.utils import mediainfo\r\nfrom scipy.fft import fft\r\nfrom matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg)\r\nimport numpy as np\r\n\r\n\r\nclass AudioAnalyzerApp:\r\n    def __init__(self, master):\r\n        self.master = master\r\n        self.master.title(\"Audio Analyzer\")\r\n        self.mainframe = None\r\n        self.load_file_frame = None\r\n        self.status_frame = None\r\n        self.choose_file_text = None\r\n        self.wav_audio = None\r\n        self.data_file_frame = None\r\n        self.raw_data = None\r\n\r\n        self._filepath = StringVar()\r\n        self.str_filepath = None\r\n        self._status_msg = StringVar()\r\n\r\n        self.create_widgets()\r\n\r\n    def create_widgets(self):\r\n        # master is essentially the same as root in tkinter\r\n        self.master.geometry('1000x700')\r\n        self.master.rowconfigure(0, weight=1)\r\n        self.master.columnconfigure(0, weight=1)\r\n\r\n        self.mainframe = ttk.Frame(self.master, padding='5 5 5 5')\r\n        self.mainframe.grid(row=0, column=0, sticky=\"NEWS\")\r\n        self.mainframe.rowconfigure(0, weight=1)\r\n        self.mainframe.columnconfigure(0, weight=1)\r\n\r\n        self.load_file_frame = ttk.LabelFrame(self.mainframe, padding='5 5 5 5', text='Choose File')\r\n        self.load_file_frame.grid(column=0, row=0, sticky='NEW')\r\n        self.load_file_frame.columnconfigure(0, weight=1)\r\n        self.load_file_frame.rowconfigure(0, weight=1)\r\n\r\n        choose_file_label = ttk.Label(self.load_file_frame, text='Please input file you would like to analyze:')\r\n        choose_file_label.grid(column=0, row=0, columnspan=1, sticky='NEWS')\r\n\r\n        self.choose_file_text = ttk.Entry(self.load_file_frame, width=70, textvariable=self._filepath)\r\n        self.choose_file_text.grid(column=0, row=1, sticky='NEWS')\r\n\r\n        choose_file_button = ttk.Button(self.load_file_frame, text=\"Browse\", command=self.getfilepath)\r\n        choose_file_button.grid(row=2, column=0, sticky='W')\r\n\r\n        load_file_button = ttk.Button(self.load_file_frame, text=\"Load\", command=self.loadfilepath)\r\n        load_file_button.grid(row=1, column=1, sticky='E')\r\n\r\n        self.data_file_frame = ttk.LabelFrame(self.mainframe, padding='5 5 5 5', text='Data')\r\n        self.data_file_frame.grid(column=0, row=1, sticky='NEW')\r\n        self.data_file_frame.rowconfigure(1, weight=1)\r\n        self.data_file_frame.columnconfigure(0, weight=1)\r\n\r\n        show_plot = ttk.Button(self.data_file_frame, text='Plot', command=self.createplot)\r\n        show_plot.grid(column=0, row=1, sticky='WN')\r\n\r\n        show_plot = ttk.Button(self.data_file_frame, text='Low Plot', command=self.createplot)\r\n        show_plot.grid(column=1, row=1, sticky='WN')\r\n\r\n        show_plot = ttk.Button(self.data_file_frame, text='Mid Plot', command=self.createplot)\r\n        show_plot.grid(column=2, row=1, sticky='WN')\r\n\r\n        show_plot = ttk.Button(self.data_file_frame, text='High Plot', command=self.createplot)\r\n        show_plot.grid(column=3, row=1, sticky='WN')\r\n\r\n        show_time = ttk.Button(self.data_file_frame, text='Time', command=self.extracttime)\r\n        show_time.grid(column=0, row=2, sticky='WN')\r\n\r\n        self.status_frame = ttk.Frame(self.master, relief='sunken', padding='2 2 2 2')\r\n        self.status_frame.grid(row=1, column=0, sticky='EWS')\r\n        self._status_msg.set('')\r\n        status = ttk.Label(self.status_frame, textvariable=self._status_msg, anchor=W)\r\n        status.grid(row=0, column=0, sticky='EW')\r\n\r\n    def getwavdata(self,audio_file):\r\n        wav_file = wave.open(audio_file, 'rb')\r\n        audio_data = wav_file.readframes(wav_file.getnframes())\r\n        return np.frombuffer(audio_data, np.int16)\r\n\r\n    def getfilepath(self):\r\n        self._filepath.set(tk.filedialog.askopenfilename())\r\n\r\n    def loadfilepath(self):\r\n        try:\r\n            if str(self.choose_file_text.get()) != '':\r\n                self._filepath.set(self.choose_file_text.get())\r\n                self.sb(f'File path set as \\\"{self._filepath.get()}\\\"')\r\n                self.converttowav(self._filepath.get())\r\n            else:\r\n                self.sb('File path cannot be empty.')\r\n        except Exception as e:\r\n            self.sb(f'The error is {e}')\r\n\r\n    def sb(self, msg):\r\n        self._status_msg.set(msg)\r\n\r\n    def converttowav(self, audio_file_path):\r\n        if not os.path.isfile(audio_file_path):\r\n            self.sb(f\"Error: File {audio_file_path} not found.\")\r\n            return\r\n\r\n        supported_extensions = ['.mp3', '.wav', '.ogg']  # audio extensions\r\n        file_extension = os.path.splitext(audio_file_path)[1].lower()\r\n\r\n        if file_extension not in supported_extensions:\r\n            self.sb(f\"Error: Unsupported file format ({file_extension}). Supported formats are {supported_extensions}.\")\r\n            return\r\n        else:\r\n            try:\r\n                audio_file = AudioSegment.from_file(\r\n                    audio_file_path,\r\n                    format=os.path.splitext(audio_file_path)[-1].strip('.')\r\n                )\r\n\r\n                wav_data = audio_file.raw_data\r\n                self.wav_audio = AudioSegment(\r\n                    wav_data,\r\n                    frame_rate=audio_file.frame_rate,\r\n                    sample_width=audio_file.sample_width,\r\n                    channels=audio_file.channels\r\n                )\r\n                self.wav_audio.set_channels(1)\r\n                self.raw_data = np.frombuffer(self.wav_audio.raw_data, dtype=np.int16)\r\n            except Exception as e:\r\n                self.sb(f\"Error during conversion: {e}\")\r\n\r\n    def extracttime(self):\r\n        if self.wav_audio is not None:\r\n            time_duration = len(self.wav_audio)/1000\r\n            wav_audio_time_length = np.linspace(0, time_duration, len(self.raw_data))\r\n\r\n            time_min = time_duration // 60\r\n            time_sec = round(time_duration % (24 * 3600), 2)\r\n\r\n            time_string = f'{time_min} minutes {time_sec} seconds'\r\n            self.sb(f\"Time is: {time_string}\")\r\n\r\n            # print(mediainfo(self._filepath.get()))\r\n        else:\r\n            self.sb(f'Make sure to press load')\r\n\r\n    def createplot(self):\r\n        if self.wav_audio is not None:\r\n            # Calculate time values\r\n            time_values = np.arange(len(self.raw_data)) / self.wav_audio.frame_rate\r\n            fig, ax = plt.subplots(figsize=(7, 4))\r\n            ax.plot(time_values, self.raw_data)\r\n            ax.set_title('Waveform of ' + self._filepath.get().split('/')[-1])\r\n            ax.set_xlabel('Time (seconds)')\r\n            ax.set_ylabel('Amplitude')\r\n\r\n            canvas = FigureCanvasTkAgg(fig, master=self.data_file_frame)\r\n            canvas.draw()\r\n            canvas.get_tk_widget().grid(column=0, row=3)\r\n        else:\r\n            self.sb(f'Make sure to press load')\r\n\r\n\r\n    def getmetadata(self):\r\n        self.str_filepath = self._filepath.get()\r\n        metadata = {\r\n            'Title': self.str_filepath.split('/')[-1],\r\n            'Latest Modification Time': datetime.datetime.fromtimestamp(os.path.getmtime(self.str_filepath)),\r\n            'File Creation Date': datetime.datetime.fromtimestamp(os.path.getctime(self.str_filepath)).date(),\r\n            'File Size': os.path.getsize(self.str_filepath)\r\n        }\r\n\r\n        return metadata\r\n\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    root = Tk()\r\n    app = AudioAnalyzerApp(root)\r\n    root.mainloop()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/soundapp.py b/soundapp.py
--- a/soundapp.py	
+++ b/soundapp.py	
@@ -80,6 +80,9 @@
         show_plot = ttk.Button(self.data_file_frame, text='High Plot', command=self.createplot)
         show_plot.grid(column=3, row=1, sticky='WN')
 
+        show_plot = ttk.Button(self.data_file_frame, text='Combined Plot', command=self.createplot)
+        show_plot.grid(column=2, row=2, sticky='WN')
+
         show_time = ttk.Button(self.data_file_frame, text='Time', command=self.extracttime)
         show_time.grid(column=0, row=2, sticky='WN')
 
Index: .idea/CSFinalProject.iml
===================================================================
diff --git a/.idea/CSFinalProject.iml b/.idea/CSFinalProject.iml
deleted file mode 100644
--- a/.idea/CSFinalProject.iml	
+++ /dev/null	
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module version="4">
-  <component name="PyDocumentationSettings">
-    <option name="format" value="PLAIN" />
-    <option name="myDocStringFormat" value="Plain" />
-  </component>
-  <component name="TestRunnerService">
-    <option name="PROJECT_TEST_RUNNER" value="py.test" />
-  </component>
-</module>
\ No newline at end of file
