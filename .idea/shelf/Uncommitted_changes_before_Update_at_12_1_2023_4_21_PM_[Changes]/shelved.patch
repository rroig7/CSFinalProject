Index: soundapp.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\nimport os.path\r\nfrom tkinter import *\r\nfrom tkinter import ttk, filedialog, messagebox\r\nimport tkinter as tk\r\nfrom pathlib import Path\r\nfrom pydub import AudioSegment\r\nimport wave\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.figure as Figure\r\nfrom matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk)\r\nimport numpy as np\r\n\r\n# returns raw audio data from wav file\r\ndef getwavdata(audio_file):\r\n    wav_file = wave.open(audio_file, 'rb')\r\n    audio_data = wav_file.readframes(wav_file.getnframes())\r\n    return np.frombuffer(audio_data, np.int16)\r\n\r\n\r\ndef getfilepath():\r\n    _filepath.set(tk.filedialog.askopenfilename())\r\n\r\n\r\ndef loadfilepath():\r\n    try:\r\n        if str(_choose_file_textbox.get()) != '':\r\n            _filepath.set(_choose_file_textbox.get())\r\n            sb(f'File path set as \\\"{_filepath.get()}\\\"')\r\n        else:\r\n            sb('File path cannot be empty.')\r\n    except:\r\n        sb('Error setting specified path.')\r\n\r\n\r\n# checks if file is in wav format\r\n\r\ndef sb(msg):\r\n    _status_msg.set(msg)\r\n\r\n\r\n# Not finished, not sure if this function works or not\r\n'''def converttowav(input_file):\r\n    # Check if the file exists\r\n    if not os.path.isfile(input_file):\r\n        print(f\"Error: File {input_file} not found.\")\r\n        return\r\n\r\n    # Check if the file has a supported audio extension\r\n    supported_extensions = ['.mp3', '.wav', '.ogg']  # audio extensions\r\n    file_extension = os.path.splitext(input_file)[1].lower()\r\n\r\n    if file_extension not in supported_extensions:\r\n        print(f\"Error: Unsupported file format ({file_extension}). Supported formats are {supported_extensions}.\")\r\n        return\r\n\r\n    try:\r\n        # Attempt to load and convert the audio file\r\n        audiofile = AudioSegment.from_file(input_file, format='wav')\r\n        print(f\"Conversion successful. WAV file saved as {audiofile}\")\r\n        return audiofile\r\n    except Exception as e:\r\n        print(f\"Error during conversion: {e}\")\r\n'''\r\n\r\n\r\n# This works! It extracts raw audio data from any audio file type, then returns it as wav\r\ndef converttowav(audio_file_path):\r\n    audio_file = AudioSegment.from_file(\r\n        audio_file_path,\r\n        format=os.path.splitext(audio_file_path)[-1].strip('.')\r\n    )\r\n\r\n    wav_data = audio_file.raw_data\r\n    wav_audio = AudioSegment(\r\n        wav_data,\r\n        frame_rate=audio_file.frame_rate,\r\n        sample_width=audio_file.sample_width,\r\n        channels=audio_file.channels\r\n    )\r\n    # sets channels to 1 in case of multiple channels\r\n    wav_audio.set_channels(1)\r\n\r\n    return wav_audio\r\n\r\n\r\ndef extractdata():\r\n    wav_audio = converttowav(_filepath.get())\r\n\r\n    raw_data = np.frombuffer(wav_audio.raw_data, dtype=np.int16)\r\n\r\n    time_duration = len(raw_data) / wav_audio.frame_rate\r\n    wav_audio_time_length = np.linspace(0, time_duration, len(raw_data))\r\n\r\n    time_min = time_duration // 60\r\n    time_sec = round(time_duration % (24 * 3600), 2)\r\n\r\n    time_string = f'{time_min} minutes {time_sec} seconds'\r\n    print(time_string)\r\n    print(getmetadata(_filepath.get()))\r\n\r\n\r\ndef createplot():\r\n\r\n    # data = getwavdata(_filepath.get())\r\n\r\n    data = np.frombuffer(converttowav(_filepath.get()).raw_data, dtype=np.int16)\r\n\r\n    fig, ax = plt.subplots(figsize=(5, 2))\r\n    ax.plot(data)\r\n    ax.set_title('Waveform of ' + _filepath.get().split('/')[-1])\r\n\r\n    canvas = FigureCanvasTkAgg(fig, master=_data_file_frame)\r\n    canvas.draw()\r\n    canvas.get_tk_widget().grid(column=0, row=3)\r\n\r\n\r\ndef getmetadata(file_path):\r\n\r\n    metadata = {\r\n        'Title': file_path.split('/')[-1],\r\n        'Latest Modification Time': datetime.datetime.fromtimestamp(os.path.getmtime(file_path)),\r\n        'File Creation Date': datetime.datetime.fromtimestamp(os.path.getctime(file_path)).date(),\r\n        'File Size': os.path.getsize(file_path)\r\n    }\r\n\r\n    return metadata\r\n\r\nif __name__ == \"__main__\":  # execute logic if run directly\r\n    _root = Tk()  # instantiate instance of Tk class\r\n    _root.title('Sound App')\r\n    _root.geometry('800x500')\r\n    _root.rowconfigure(0, weight=1)\r\n    _root.columnconfigure(0, weight=1)\r\n    # _root.resizable(False, False)\r\n    _mainframe = ttk.Frame(_root, padding='5 5 5 5 ')  # root is parent of frame\r\n    _mainframe.grid(row=0, column=0, sticky=(\"E\", \"W\", \"N\", \"S\"))\r\n    _mainframe.rowconfigure(0, weight=1)\r\n    _mainframe.columnconfigure(0, weight=1)\r\n    # placed on first row,col of parent\r\n    # frame can extend itself in all cardinal directions\r\n\r\n    _load_file_frame = ttk.LabelFrame(\r\n        _mainframe,\r\n        padding='5 5 5 5',\r\n        text='Choose File'\r\n    )\r\n    _load_file_frame.grid(\r\n        column=0,\r\n        row=0,\r\n        sticky='new'\r\n    )\r\n    _load_file_frame.rowconfigure(0, weight=1)\r\n    _load_file_frame.columnconfigure(0, weight=1)\r\n\r\n    _filepath = StringVar()\r\n\r\n    _choose_file_label = ttk.Label(\r\n        _load_file_frame,\r\n        text='Please input the path of the file you wish to analyze:',\r\n    )\r\n    _choose_file_label.grid(\r\n        column=0,\r\n        row=0,\r\n        columnspan=1,\r\n        sticky='W'\r\n    )\r\n\r\n    _choose_file_textbox = ttk.Entry(\r\n        _load_file_frame,\r\n        width=70,\r\n        textvariable=_filepath\r\n    )\r\n    _choose_file_textbox.grid(\r\n        column=0,\r\n        row=1,\r\n        sticky='ew'\r\n    )\r\n\r\n    _choose_file_button = ttk.Button(\r\n        _load_file_frame,\r\n        text='Browse',\r\n        command=getfilepath\r\n    )\r\n    _choose_file_button.grid(\r\n        column=0,\r\n        row=2,\r\n        sticky='W'\r\n    )\r\n    _load_file_button = ttk.Button(\r\n        _load_file_frame,\r\n        text='Load',\r\n        command=loadfilepath\r\n    )\r\n    _load_file_button.grid(\r\n        column=2,\r\n        row=1,\r\n        sticky='E',\r\n    )\r\n\r\n    _data_file_frame = ttk.LabelFrame(\r\n        _mainframe,\r\n        padding='5 5 5 5',\r\n        text='Data'\r\n    )\r\n    _data_file_frame.grid(\r\n        column=0,\r\n        row=1,\r\n        sticky='new'\r\n    )\r\n    _data_file_frame.rowconfigure(1, weight=1)\r\n    _data_file_frame.columnconfigure(0, weight=1)\r\n\r\n    _plot_show = ttk.Button(\r\n        _data_file_frame,\r\n        text='Plot',\r\n        command=createplot\r\n    )\r\n    _plot_show.grid(\r\n        column=0,\r\n        row=1,\r\n        sticky='wn'\r\n    )\r\n    _data_show = ttk.Button(\r\n        _data_file_frame,\r\n        text='Data',\r\n        command=extractdata\r\n    )\r\n    _data_show.grid(\r\n        column=0,\r\n        row=2,\r\n        sticky='nw'\r\n    )\r\n\r\n    _status_frame = ttk.Frame(\r\n        _root, relief='sunken', padding='2 2 2 2')\r\n    _status_frame.grid(row=1, column=0, sticky=(\"E\", \"W\", \"S\"))\r\n    _status_msg = StringVar()  # need modified when update status text\r\n    _status_msg.set('')\r\n    _status = ttk.Label(\r\n        _status_frame, textvariable=_status_msg, anchor=W)\r\n    _status.grid(row=0, column=0, sticky=(E, W))\r\n\r\n    # _root.bind(\"<Configure>\", on_resize)\r\n    _root.mainloop()  # listens for events, blocks any code that comes after it\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/soundapp.py b/soundapp.py
--- a/soundapp.py	(revision 621a4ae07e6a3ff32ce87eb4ffe8be0b156e3868)
+++ b/soundapp.py	(date 1701465667015)
@@ -4,242 +4,184 @@
 from tkinter import ttk, filedialog, messagebox
 import tkinter as tk
 from pathlib import Path
+
+
+import ffmpeg
 from pydub import AudioSegment
 import wave
 import matplotlib.pyplot as plt
-import matplotlib.figure as Figure
-from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk)
+from pydub.utils import mediainfo
+from scipy.fft import fft
+from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg)
 import numpy as np
 
-# returns raw audio data from wav file
-def getwavdata(audio_file):
-    wav_file = wave.open(audio_file, 'rb')
-    audio_data = wav_file.readframes(wav_file.getnframes())
-    return np.frombuffer(audio_data, np.int16)
+
+class AudioAnalyzerApp:
+    def __init__(self, master):
+        self.master = master
+        self.master.title("Audio Analyzer")
+        self.mainframe = None
+        self.load_file_frame = None
+        self.status_frame = None
+        self.choose_file_text = None
+        self.wav_audio = None
+        self.data_file_frame = None
+        self.raw_data = None
+
+        self._filepath = StringVar()
+        self.str_filepath = None
+        self._status_msg = StringVar()
+
+        self.create_widgets()
+
+    def create_widgets(self):
+        # master is essentially the same as root in tkinter
+        self.master.geometry('1000x700')
+        self.master.rowconfigure(0, weight=1)
+        self.master.columnconfigure(0, weight=1)
+
+        self.mainframe = ttk.Frame(self.master, padding='5 5 5 5')
+        self.mainframe.grid(row=0, column=0, sticky="NEWS")
+        self.mainframe.rowconfigure(0, weight=1)
+        self.mainframe.columnconfigure(0, weight=1)
+
+        self.load_file_frame = ttk.LabelFrame(self.mainframe, padding='5 5 5 5', text='Choose File')
+        self.load_file_frame.grid(column=0, row=0, sticky='NEW')
+        self.load_file_frame.columnconfigure(0, weight=1)
+        self.load_file_frame.rowconfigure(0, weight=1)
+
+        choose_file_label = ttk.Label(self.load_file_frame, text='Please input file you would like to analyze:')
+        choose_file_label.grid(column=0, row=0, columnspan=1, sticky='NEWS')
+
+        self.choose_file_text = ttk.Entry(self.load_file_frame, width=70, textvariable=self._filepath)
+        self.choose_file_text.grid(column=0, row=1, sticky='NEWS')
+
+        choose_file_button = ttk.Button(self.load_file_frame, text="Browse", command=self.getfilepath)
+        choose_file_button.grid(row=2, column=0, sticky='W')
+
+        load_file_button = ttk.Button(self.load_file_frame, text="Load", command=self.loadfilepath)
+        load_file_button.grid(row=1, column=1, sticky='E')
+
+        self.data_file_frame = ttk.LabelFrame(self.mainframe, padding='5 5 5 5', text='Data')
+        self.data_file_frame.grid(column=0, row=1, sticky='NEW')
+        self.data_file_frame.rowconfigure(1, weight=1)
+        self.data_file_frame.columnconfigure(0, weight=1)
+
+        show_plot = ttk.Button(self.data_file_frame, text='Plot', command=self.createplot)
+        show_plot.grid(column=0, row=1, sticky='WN')
+
+        show_time = ttk.Button(self.data_file_frame, text='Time', command=self.extracttime)
+        show_time.grid(column=0, row=2, sticky='WN')
+
+        self.status_frame = ttk.Frame(self.master, relief='sunken', padding='2 2 2 2')
+        self.status_frame.grid(row=1, column=0, sticky='EWS')
+        self._status_msg.set('')
+        status = ttk.Label(self.status_frame, textvariable=self._status_msg, anchor=W)
+        status.grid(row=0, column=0, sticky='EW')
+
+    def getwavdata(self,audio_file):
+        wav_file = wave.open(audio_file, 'rb')
+        audio_data = wav_file.readframes(wav_file.getnframes())
+        return np.frombuffer(audio_data, np.int16)
 
-
-def getfilepath():
-    _filepath.set(tk.filedialog.askopenfilename())
+    def getfilepath(self):
+        self._filepath.set(tk.filedialog.askopenfilename())
 
-
-def loadfilepath():
-    try:
-        if str(_choose_file_textbox.get()) != '':
-            _filepath.set(_choose_file_textbox.get())
-            sb(f'File path set as \"{_filepath.get()}\"')
-        else:
-            sb('File path cannot be empty.')
-    except:
-        sb('Error setting specified path.')
-
+    def loadfilepath(self):
+        try:
+            if str(self.choose_file_text.get()) != '':
+                self._filepath.set(self.choose_file_text.get())
+                self.sb(f'File path set as \"{self._filepath.get()}\"')
+                self.converttowav(self._filepath.get())
+            else:
+                self.sb('File path cannot be empty.')
+        except Exception as e:
+            self.sb(f'The error is {e}')
 
-# checks if file is in wav format
+    def sb(self, msg):
+        self._status_msg.set(msg)
 
-def sb(msg):
-    _status_msg.set(msg)
-
-
-# Not finished, not sure if this function works or not
-'''def converttowav(input_file):
-    # Check if the file exists
-    if not os.path.isfile(input_file):
-        print(f"Error: File {input_file} not found.")
-        return
+    def converttowav(self, audio_file_path):
+        if not os.path.isfile(audio_file_path):
+            self.sb(f"Error: File {audio_file_path} not found.")
+            return
 
-    # Check if the file has a supported audio extension
-    supported_extensions = ['.mp3', '.wav', '.ogg']  # audio extensions
-    file_extension = os.path.splitext(input_file)[1].lower()
+        supported_extensions = ['.mp3', '.wav', '.ogg']  # audio extensions
+        file_extension = os.path.splitext(audio_file_path)[1].lower()
 
-    if file_extension not in supported_extensions:
-        print(f"Error: Unsupported file format ({file_extension}). Supported formats are {supported_extensions}.")
-        return
-
-    try:
-        # Attempt to load and convert the audio file
-        audiofile = AudioSegment.from_file(input_file, format='wav')
-        print(f"Conversion successful. WAV file saved as {audiofile}")
-        return audiofile
-    except Exception as e:
-        print(f"Error during conversion: {e}")
-'''
-
-
-# This works! It extracts raw audio data from any audio file type, then returns it as wav
-def converttowav(audio_file_path):
-    audio_file = AudioSegment.from_file(
-        audio_file_path,
-        format=os.path.splitext(audio_file_path)[-1].strip('.')
-    )
+        if file_extension not in supported_extensions:
+            self.sb(f"Error: Unsupported file format ({file_extension}). Supported formats are {supported_extensions}.")
+            return
+        else:
+            try:
+                audio_file = AudioSegment.from_file(
+                    audio_file_path,
+                    format=os.path.splitext(audio_file_path)[-1].strip('.')
+                )
 
-    wav_data = audio_file.raw_data
-    wav_audio = AudioSegment(
-        wav_data,
-        frame_rate=audio_file.frame_rate,
-        sample_width=audio_file.sample_width,
-        channels=audio_file.channels
-    )
-    # sets channels to 1 in case of multiple channels
-    wav_audio.set_channels(1)
-
-    return wav_audio
-
-
-def extractdata():
-    wav_audio = converttowav(_filepath.get())
+                wav_data = audio_file.raw_data
+                self.wav_audio = AudioSegment(
+                    wav_data,
+                    frame_rate=audio_file.frame_rate,
+                    sample_width=audio_file.sample_width,
+                    channels=audio_file.channels
+                )
+                self.wav_audio.set_channels(1)
+                self.raw_data = np.frombuffer(self.wav_audio.raw_data, dtype=np.int16)
+            except Exception as e:
+                self.sb(f"Error during conversion: {e}")
 
-    raw_data = np.frombuffer(wav_audio.raw_data, dtype=np.int16)
-
-    time_duration = len(raw_data) / wav_audio.frame_rate
-    wav_audio_time_length = np.linspace(0, time_duration, len(raw_data))
+    def extracttime(self):
+        if self.wav_audio is not None:
+            time_duration = len(self.wav_audio)/1000
+            wav_audio_time_length = np.linspace(0, time_duration, len(self.raw_data))
 
-    time_min = time_duration // 60
-    time_sec = round(time_duration % (24 * 3600), 2)
+            time_min = time_duration // 60
+            time_sec = round(time_duration % (24 * 3600), 2)
 
-    time_string = f'{time_min} minutes {time_sec} seconds'
-    print(time_string)
-    print(getmetadata(_filepath.get()))
-
+            time_string = f'{time_min} minutes {time_sec} seconds'
+            self.sb(f"Time is: {time_string}")
 
-def createplot():
+            # print(mediainfo(self._filepath.get()))
+        else:
+            self.sb(f'Make sure to press load')
 
-    # data = getwavdata(_filepath.get())
+    def createplot(self, audio_file):
+        if self.wav_audio is not None:
+            # Calculate time values
+            time_values = np.arange(len(self.raw_data)) / self.wav_audio.frame_rate
+            fig, ax = plt.subplots(figsize=(7, 4))
+            ax.plot(time_values, self.raw_data)
+            ax.set_title('Waveform of ' + self._filepath.get().split('/')[-1])
+            ax.set_xlabel('Time (seconds)')
+            ax.set_ylabel('Amplitude')
 
-    data = np.frombuffer(converttowav(_filepath.get()).raw_data, dtype=np.int16)
-
-    fig, ax = plt.subplots(figsize=(5, 2))
-    ax.plot(data)
-    ax.set_title('Waveform of ' + _filepath.get().split('/')[-1])
-
-    canvas = FigureCanvasTkAgg(fig, master=_data_file_frame)
-    canvas.draw()
-    canvas.get_tk_widget().grid(column=0, row=3)
+            canvas = FigureCanvasTkAgg(fig, master=self.data_file_frame)
+            canvas.draw()
+            canvas.get_tk_widget().grid(column=0, row=3)
+        else:
+            self.sb(f'Make sure to press load')
 
 
-def getmetadata(file_path):
-
-    metadata = {
-        'Title': file_path.split('/')[-1],
-        'Latest Modification Time': datetime.datetime.fromtimestamp(os.path.getmtime(file_path)),
-        'File Creation Date': datetime.datetime.fromtimestamp(os.path.getctime(file_path)).date(),
-        'File Size': os.path.getsize(file_path)
-    }
+    def getmetadata(self):
+        self.str_filepath = self._filepath.get()
+        metadata = {
+            'Title': self.str_filepath.split('/')[-1],
+            'Latest Modification Time': datetime.datetime.fromtimestamp(os.path.getmtime(self.str_filepath)),
+            'File Creation Date': datetime.datetime.fromtimestamp(os.path.getctime(self.str_filepath)).date(),
+            'File Size': os.path.getsize(self.str_filepath)
+        }
 
-    return metadata
+        return metadata
 
-if __name__ == "__main__":  # execute logic if run directly
-    _root = Tk()  # instantiate instance of Tk class
-    _root.title('Sound App')
-    _root.geometry('800x500')
-    _root.rowconfigure(0, weight=1)
-    _root.columnconfigure(0, weight=1)
-    # _root.resizable(False, False)
-    _mainframe = ttk.Frame(_root, padding='5 5 5 5 ')  # root is parent of frame
-    _mainframe.grid(row=0, column=0, sticky=("E", "W", "N", "S"))
-    _mainframe.rowconfigure(0, weight=1)
-    _mainframe.columnconfigure(0, weight=1)
-    # placed on first row,col of parent
-    # frame can extend itself in all cardinal directions
-
-    _load_file_frame = ttk.LabelFrame(
-        _mainframe,
-        padding='5 5 5 5',
-        text='Choose File'
-    )
-    _load_file_frame.grid(
-        column=0,
-        row=0,
-        sticky='new'
-    )
-    _load_file_frame.rowconfigure(0, weight=1)
-    _load_file_frame.columnconfigure(0, weight=1)
 
-    _filepath = StringVar()
 
-    _choose_file_label = ttk.Label(
-        _load_file_frame,
-        text='Please input the path of the file you wish to analyze:',
-    )
-    _choose_file_label.grid(
-        column=0,
-        row=0,
-        columnspan=1,
-        sticky='W'
-    )
 
-    _choose_file_textbox = ttk.Entry(
-        _load_file_frame,
-        width=70,
-        textvariable=_filepath
-    )
-    _choose_file_textbox.grid(
-        column=0,
-        row=1,
-        sticky='ew'
-    )
 
-    _choose_file_button = ttk.Button(
-        _load_file_frame,
-        text='Browse',
-        command=getfilepath
-    )
-    _choose_file_button.grid(
-        column=0,
-        row=2,
-        sticky='W'
-    )
-    _load_file_button = ttk.Button(
-        _load_file_frame,
-        text='Load',
-        command=loadfilepath
-    )
-    _load_file_button.grid(
-        column=2,
-        row=1,
-        sticky='E',
-    )
 
-    _data_file_frame = ttk.LabelFrame(
-        _mainframe,
-        padding='5 5 5 5',
-        text='Data'
-    )
-    _data_file_frame.grid(
-        column=0,
-        row=1,
-        sticky='new'
-    )
-    _data_file_frame.rowconfigure(1, weight=1)
-    _data_file_frame.columnconfigure(0, weight=1)
 
-    _plot_show = ttk.Button(
-        _data_file_frame,
-        text='Plot',
-        command=createplot
-    )
-    _plot_show.grid(
-        column=0,
-        row=1,
-        sticky='wn'
-    )
-    _data_show = ttk.Button(
-        _data_file_frame,
-        text='Data',
-        command=extractdata
-    )
-    _data_show.grid(
-        column=0,
-        row=2,
-        sticky='nw'
-    )
+if __name__ == "__main__":
+    root = Tk()
+    app = AudioAnalyzerApp(root)
 
-    _status_frame = ttk.Frame(
-        _root, relief='sunken', padding='2 2 2 2')
-    _status_frame.grid(row=1, column=0, sticky=("E", "W", "S"))
-    _status_msg = StringVar()  # need modified when update status text
-    _status_msg.set('')
-    _status = ttk.Label(
-        _status_frame, textvariable=_status_msg, anchor=W)
-    _status.grid(row=0, column=0, sticky=(E, W))
-
-    # _root.bind("<Configure>", on_resize)
-    _root.mainloop()  # listens for events, blocks any code that comes after it
+    root.mainloop()
Index: .idea/CSFinalProject.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10 (CSFinalProject)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/CSFinalProject.iml b/.idea/CSFinalProject.iml
--- a/.idea/CSFinalProject.iml	(revision 621a4ae07e6a3ff32ce87eb4ffe8be0b156e3868)
+++ b/.idea/CSFinalProject.iml	(date 1701464688125)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.10 (CSFinalProject)" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
